version: '3.8'

services:
  # Hospital Management App
  hospital-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - hospital-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: hospital_db
      POSTGRES_USER: hospital_user
      POSTGRES_PASSWORD: hospital_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hospital-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospital_user -d hospital_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hospital-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - hospital-app
    networks:
      - hospital-network
    restart: unless-stopped

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: hospital_db
      POSTGRES_USER: hospital_user
      POSTGRES_PASSWORD: hospital_password
      PGPASSWORD: hospital_password
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh
    command: >
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          sleep 86400
          /backup.sh
        done
      "
    depends_on:
      - postgres
    networks:
      - hospital-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  hospital-network:
    driver: bridge